package org.example.bidflow.domain.bid.service;

import lombok.RequiredArgsConstructor;
import org.example.bidflow.domain.auction.dto.AuctionBidRequest;
import org.example.bidflow.domain.auction.entity.Auction;
import org.example.bidflow.domain.auction.service.AuctionService;
import org.example.bidflow.domain.bid.dto.model.response.BidCreateResponse;
import org.example.bidflow.domain.bid.entity.Bid;
import org.example.bidflow.domain.bid.repository.BidRepository;
import org.example.bidflow.domain.user.entity.User;
import org.example.bidflow.domain.user.service.UserService;
import org.example.bidflow.global.app.RedisCommon;
import org.example.bidflow.global.exception.ServiceException;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Time;
import java.time.LocalDateTime;

@Service
@RequiredArgsConstructor
public class BidService {

    private final AuctionService auctionService;
    private final UserService userService;
    private final BidRepository bidRepository;
    private final RedisCommon redisCommon;

    /*@Transactional
    public BidCreateResponse createBid(Long auctionId, AuctionBidRequest request) {

        String key = "auction:" + auctionId;

        // ÏÇ¨Ïö©Ïûê Í≤ÄÏ¶ù
        User user = userService.getUserByUuid(request.getUserUuid());

        // Í≤ΩÎß§ ÏÉÅÌÉú Í≤ÄÏ¶ù üö©
        Auction auction = auctionService.getAuctionWithValidation(auctionId);
        BidInfo currentBid = redisCommon.getHashAsObject(key, BidInfo.class);

        if (currentBid == null) { // üö©

            BidInfo newBid =  BidInfo.builder()
                    .amount(request.getAmount())
                    .userUuid(request.getUserUuid())
                    .build();

            redisCommon.putObjectAsHash(key, newBid);
            currentBid = newBid;

        }

        if(request.getAmount() <= currentBid.getAmount() *//*amount*//*) {
            throw new ServiceException(HttpStatus.BAD_REQUEST.toString(), "ÏûÖÏ∞∞ Í∏àÏï°Ïù¥ ÌòÑÏû¨ ÏµúÍ≥†Í∞ÄÎ≥¥Îã§ ÎÇÆÏäµÎãàÎã§.");
        }

        // ÏµúÏÜå ÏûÖÏ∞∞ Îã®ÏúÑ Í≤ÄÏ¶ù üö©
        if (request.getAmount() < currentBid.getAmount() + auction.getMinBid()) {
            throw new ServiceException(HttpStatus.BAD_REQUEST.toString(),
                    "ÏûÖÏ∞∞ Í∏àÏï°Ïù¥ ÏµúÏÜå ÏûÖÏ∞∞ Îã®ÏúÑÎ≥¥Îã§ ÏûëÏäµÎãàÎã§. ÏµúÏÜå " + (currentBid.getAmount() + auction.getMinBid()) + "Ïõê Ïù¥ÏÉÅ ÏûÖÏ∞∞Ìï¥Ïïº Ìï©ÎãàÎã§.");
        }
        redisCommon.putAllInHash(key, Map.of("amount", request.getAmount(), "userUuid", request.getUserUuid()));

        // ÏûÖÏ∞∞ Ï≤òÎ¶¨ (ÏÉàÎ°ú ÏÉùÏÑ±ÌïòÍ±∞ÎÇò Í∏àÏï° Í∞±Ïã†)
        Bid bid = Bid.createBid(auction, user, request.getAmount(), LocalDateTime.now());

        // ÏûÖÏ∞∞ Ï†ÄÏû•
        bidRepository.save(bid);

        // BidDto Î≥ÄÌôò ÌõÑ Î∞òÌôò
        return BidCreateResponse.from(bid);
    }*/
    @Transactional
    public BidCreateResponse createBid(Long auctionId, AuctionBidRequest request) {
        String hashKey = "auction:" + auctionId;
        LocalDateTime now = LocalDateTime.now();
        //- ÏûÖÏ∞∞ Í≥ºÏ†ïÏóêÏÑú Í≤ΩÎß§ ÏßÑÌñâÏ§ëÏù¥ ÏïÑÎãê Îïå(ÏãúÍ∞ÑÏúºÎ°ú ÎπÑÍµê) ÏòàÏô∏ Ï≤òÎ¶¨
        // Í≤ΩÎß§ ÏãúÏûë ÏãúÍ∞Ñ <= ÌòÑÏû¨ ÏãúÍ∞Ñ <= Í≤ΩÎß§ Ï¢ÖÎ£å ÏãúÍ∞Ñ

        // ÏÇ¨Ïö©Ïûê Î∞è Í≤ΩÎß§ Í≤ÄÏ¶ù
        User user = userService.getUserByUuid(request.getUserUuid());
        Auction auction = auctionService.getAuctionWithValidation(auctionId);

        if(now.isBefore(auction.getStartTime())){
            throw new ServiceException(HttpStatus.BAD_REQUEST.toString(), "Í≤ΩÎß§Í∞Ä ÏãúÏûë Ï†ÑÏûÖÎãàÎã§.");
        }else if(now.isAfter(auction.getEndTime())){
            throw new ServiceException(HttpStatus.BAD_REQUEST.toString(), "Í≤ΩÎß§Í∞Ä Ï¢ÖÎ£å ÎêòÏóàÏäµÎãàÎã§.");
        }

        // RedisÏóêÏÑú ÌòÑÏû¨ ÏµúÍ≥†Í∞Ä Ï°∞Ìöå
        Integer amount = redisCommon.getFromHash(hashKey, "amount", Integer.class);

        // ÏµúÏÜå ÏûÖÏ∞∞ Îã®ÏúÑ Í≤ÄÏ¶ù
        if (request.getAmount() < amount + auction.getMinBid()) {
            throw new ServiceException(HttpStatus.BAD_REQUEST.toString(),
                    "ÏûÖÏ∞∞ Í∏àÏï°Ïù¥ ÏµúÏÜå ÏûÖÏ∞∞ Îã®ÏúÑÎ≥¥Îã§ ÏûëÏäµÎãàÎã§. ÏµúÏÜå " + (amount + auction.getMinBid()) + "Ïõê Ïù¥ÏÉÅ ÏûÖÏ∞∞Ìï¥Ïïº Ìï©ÎãàÎã§.");
        }

        // ÏóÖÏª§Î∞ç -> Ïò®Í≥†Ïûâ
        // Îç∞Ïù¥ÌÑ∞ start -> redis
        // Ïä§ÏºÄÏ§ÑÎßÅ(upcoming -> ongoing) : TTL + amount(startPrice(DB) -> Redis in-memory) + ÏÉÅÌÉúÎ≥ÄÌôî(upcoming -> ongoing)

        if (request.getAmount() <= amount) {
            throw new ServiceException(HttpStatus.BAD_REQUEST.toString(), "ÏûÖÏ∞∞ Í∏àÏï°Ïù¥ ÌòÑÏû¨ ÏµúÍ≥†Í∞ÄÎ≥¥Îã§ ÎÇÆÏäµÎãàÎã§.");
        } else {
            // ÏµúÍ≥†Í∞Ä Í∞±Ïã†
            redisCommon.putInHash(hashKey, "amount", request.getAmount());
            redisCommon.putInHash(hashKey, "userUuid", request.getUserUuid());
        }

        /*//redisCommon.setExpire(hashKey, ttl.ofSeconds(secondsUntilExpire) );
        redisCommon.setExpireAt(hashKey, auction.getEndTime());

        // ÏµúÍ≥†Í∞Ä Í∞±Ïã†
        redisCommon.putInHash(hashKey, "amount", request.getAmount());
        redisCommon.putInHash(hashKey, "userUuid", request.getUserUuid());*/

        // DB Ï†ÄÏû• (ÎÇôÏ∞∞Ïö© Î°úÍ∑∏Î°ú ÎÇ®ÍπÄ)
        Bid bid = Bid.createBid(auction, user, request.getAmount(), LocalDateTime.now());
        bidRepository.save(bid);

        return BidCreateResponse.from(bid);
    }

    // 0 -> o 105,0000
}

